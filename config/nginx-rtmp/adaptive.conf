# This is for DASH+HLS output, all inputs should push/transcode to this
# Pushed in streams must have a fixed GOP size (usually 2s, but could also be 1s, 0.5s, ...),
#   otherwise segments may vary in length leading to choppy playback or playback not working at all.
#   You can verify constant segment size by looking at generated index.mpd and index.m3u8 files in /srv/segments:
#   index.m3u8 should have constant durations after #EXTINF
# Using a seperate RTMP server instead of transcoding+outputting dash in the same ffmpeg process
#   seems to drastcally reduce latency for some reason (less strict/ignores GOP boundaries?)
application adaptive {
    live on;

    ### Only record original stream in live.conf
    record off;

    ### Internal-only restream
    allow publish 127.0.0.1;
    deny publish all;
    allow play 127.0.0.1;
    deny play all;

    ### Output DASH segments using internal muxer
    # nginx-rtmp's manifests are missing the UTCTiming tag and therefore fail DASH IF manifest validation!
    #dash on;
    #dash_path /srv/segments/dash;
    #dash_nested on;
    #dash_fragment 2;
    #dash_playlist_length 60;
    #dash_cleanup on;
    ### This is to workaround nginx-rtmp bug #1771350 (on launchpad.net)
    #exec chmod 755 /srv/segments/dash/$name;

    ### Output DASH segments using ffmpeg
    # Adjust utc_timing_url to point to your server! (see etc/nginx/nginx.conf for an example on how to setup this URL)
    # seg_duration is minimum; will cut at next keyframe after it, so for NTSC framerates it will be 2.002s
    #exec_publish mkdir -p /srv/segments/dash/$name;
    #exec ffmpeg -y -analyzeduration 12M -fflags nobuffer -i rtmp://localhost/$app/$name -c copy -f dash -use_template 1 -use_timeline 1 -window_size 30 -extra_window_size 1 -seg_duration 2.0 -remove_at_exit 1 -utc_timing_url "http://localhost:8080/time" /srv/segments/dash/$name/index.mpd;
    #exec_publish_done rm -Rf /srv/segments/dash/$name;

    ### Output HLS (MPEG-TS) segments using internal muxer
    # If you care about compatibility with Apples proprietary native implementation for HLS, also see
    #   https://developer.apple.com/documentation/http_live_streaming/hls_authoring_specification_for_apple_devices
    #   Note: 2 sec keyframe interval (=GOP size) is required
    hls on;
    hls_nested on;
    hls_path /srv/segments/hls;
    # Will split at next keyframe after this time. Apple recommends 6s (used to be 10s)
    hls_fragment 2;
    # In seconds. According to spec must have at least 6 segments
    hls_playlist_length 60;
    hls_cleanup on;
    # Variants encoded in the inputs, not all have to be present
    # Extra tags are for the master playlist to allow clients to choose a stream according to their bandwidth and supported formats
    #   See https://developer.apple.com/documentation/http_live_streaming/example_playlists_for_http_live_streaming/creating_a_master_playlist
    #   Codecs string is RFC 6381
    #     In short: <codec>.<profile><constraints><level> where H.264 is "avc1", HEVC is "hvc1",
    #     Constrained Baseline/Baseline/Main/Extended/High are 42e0/4200/4d40/5800/6400
    #     and level is in hex (e.g 3.1 -> 31 -> 1f). AAC-LC is mp4a.40.2, HE-AAC (aka AAC SBR) is mp4a.40.5
    #     Older iOS devices only support pre-RFC strings <codec>.<profile>.<level> where the latter two
    #     are represented in decimal
    #   First entry in master playlist is the default variant that will be played initially
    hls_variant $name_360p  BANDWIDTH=1360000 RESOLUTION=640x360   FRAME-RATE=23.976 CODECS=avc1.42e01e,mp4a.40.2;
    hls_variant $name_1080p BANDWIDTH=7030000 RESOLUTION=1920x1080 FRAME-RATE=23.976 CODECS=avc1.640028,mp4a.40.2;
    hls_variant $name_720p  BANDWIDTH=3880000 RESOLUTION=1280x720  FRAME-RATE=23.976 CODECS=avc1.4d401f,mp4a.40.2;
    hls_variant $name_480p  BANDWIDTH=2090000 RESOLUTION=854x480   FRAME-RATE=23.976 CODECS=avc1.4d401f,mp4a.40.2;
    hls_variant $name_270p  BANDWIDTH=730000  RESOLUTION=480x270   FRAME-RATE=23.976 CODECS=avc1.42e015,mp4a.40.2;
    ### This is to workaround nginx-rtmp bug #1771350 (on launchpad.net)
    exec chmod 755 /srv/segments/hls/$name;

    ### Output HLS (MPEG-TS) segments using ffmpeg
    #exec_publish mkdir -p /srv/segments/hls/$name;
    #exec ffmpeg -analyzeduration 12M -fflags nobuffer -i rtmp://localhost/$app/$name -c copy -f hls -hls_time 6 -hls_list_size 10 -hls_playlist_type event -hls_segment_type mpegts -hls_flags delete_segments+temp_file /srv/segments/hls/$name/index.m3u8;
    #exec_publish_done rm -Rf /srv/segments/hls/$name;

    ### Output HLS (fMP4) segments using ffmpeg
    # Supported in HLS v7+, preferred by newer clients, e.g. shaka-player
    #exec_publish mkdir -p /srv/segments/hls-fmp4/$name;
    #exec ffmpeg -y -analyzeduration 12M -fflags nobuffer -i rtmp://localhost/$app/$name -c copy -f hls -hls_time 6 -hls_list_size 10 -hls_playlist_type event -hls_segment_type fmp4 -hls_flags delete_segments+temp_file /srv/segments/hls-fmp4/$name/index.m3u8;
    #exec_publish_done rm -Rf /srv/segments/hls-fmp4/$name;

    # More muxers supported by ffmpeg, see docs: mov, segment, smoothstreaming, webm_dash_manifest, webm_chunk
}
