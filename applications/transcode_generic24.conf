# Input for generic RTMP-compatible video with 24fps and RTMP/DASH/HLS-compatible audio (usually AAC)
# Passed through to main live output (RTMP) and transcoded for segmented (DASH/HLS)
# Also works for NTSC framerates (e.g. 23.976fps); segments generated in segmented.conf will
#   automatically be sightly longer (2.002s), as specifications recommend
application transcode_generic24 {
    include applications/include/live_input.conf;

    ### Example: pull stream from some other site, static to always pull, instead of only after first client
    #pull rtmp://example.com/live/mystream name=mystream live=1 static;

    # ffmpeg options
    #   -analyzeduration 12M means 12sec and is for arut/nginx-rtmp bug #405
    #     11sec is just long enough to ensure finding a keyframe with keyframe=250 @ 23.976 FPS
    #   -fflags nobuffer is to counteract the delay introduced by analyzeduration
    #   -max_muxing_queue_size 512 is for ffmpeg bug #6375. Might not be needed when also transcoding audio
    # (lib)x264 options
    #   -profile:v main is optional to support more clients (high is default)
    #   If you have a beefy CPU, try higher x264 presets for increased efficiency
    #   -vsync cfr and force-cfr force a constant framerate by dropping or duplicating input frames
    #   rc-lookahead=12 introduces half a second of latency for a total of ~2.5s encoder latency,
    #     -tune zerolatency eliminates encoder latency completely (and saves on CPU) but quality will suffer
    #     a lot for a relatively minor improvement. (Most latency comes from DASH/HLS segment size)
    #   Adjust -crf and -maxrate according to your quality preference/bandwidth budget
    #   -g == -keyint_min determine segment size; <segment secs>=<g>/<fps>. Segment durations
    #     specified in segmented.conf should be equal to or a multiple of <segment secs>
    #   For no reason at all, x264 limits min-keyint to keyint/2+1, so setting
    #     -keyint_min won't actually work (will be clipped to 48/2+1=25). This means x264 can't do
    #     fixed GOP sizes unless we disable scenecut (-sc_threshold 0) and lose I-frames within GOPs.
    #     There are patches found online that fix this behavior.
    #   -bufsize should be <segment secs>*<maxrate>,
    # If you know your content in advance, copy file to transcode_<type><fps>.conf and add
    #   -tune grain/film/animation and -r <framerate> to ffmpeg
    exec ffmpeg -analyzeduration 12M -fflags nobuffer -i rtmp://localhost/$app/$name -c:v libx264 -profile:v main -preset veryfast -vsync cfr -x264-params rc-lookahead=12:force-cfr -crf 19 -g 48 -keyint_min 48 -sc_threshold 0 -flags +cgop -maxrate 4000k -bufsize 8000k -c:a copy -max_muxing_queue_size 512 -f flv rtmp://localhost/segmented/$name;
    # TODO: Replace transcode_generic??.conf with transcode.conf + script transcode-segmented.sh that infers
    #   framerate from URL $args and logs ffmpeg -hide_banner -nostats -loglevel warning to /dev/stderr.
}
