# This is for DASH+HLS output, all inputs should push/transcode to this
# Using a seperate RTMP server instead of transcoding+outputting dash in the same ffmpeg process
# seems to drastcally reduce latency for some reason (less strict/ignores GOP boundaries?)
application segmented {
    live on;

    ### Internal-only restream
    allow publish 127.0.0.1;
    deny publish all;
    allow play 127.0.0.1;
    deny play all;

    # Depending on your player, different DASH writers work best
    # Measured latency is from rtmp publisher's encoder, through in_generic24, to web player presentation
    # dashjs v2 = 2.9.3, v3 = 3.0.0, shaka = 2.5.5, videojs = 7.6.0 (w/ bundled http-streaming 1.10.3), ffmpeg = 4.1.4
    # dashjs v2/v3 results also apply to videojs when using videojs-contrib-dash (instead of built-in http-streaming)
    # nginx-rtmp dash on
    #   nginx-rtmp's manifests are missing the UTCTiming tag and therefore fail DASH IF manifest validation!
    #   Some players allow setting a UTCTimingSource manually.
    # - dashjs v2: Sometimes breaks and only decodes keyframes anymore, ~10-14s
    # - dashjs v3: Either buffers a lot or better than v2, ~14-20s
    # - videojs-http-streaming: Stops downloading new segments and loops an older one
    # - shaka: Won't start sometimes, repeated buffering after start, but afterwards no problems
    # ffmpeg -use_template 1 -use_timeline 1:
    # - dashjs v2: No problems, ~12-22s, typically 18s
    # - dashjs v3: No problems, ~12-22s, typically 18s
    # - videojs-http-streaming: Won't start sometimes. Breaks often and can't recover, ~18-24s
    # - shaka: No problems, ~10-16s, typically 14s
    # ffmpeg -use_template 1 -use_timeline 0:
    # - dashjs v2: Runs into an endless loop and can't recover, ~16s
    # - dashjs v3: Breaks after prolonged streaming, ~14-18s
    # - videojs-http-streaming: Won't start sometimes, Asynchronous audio, breaks after prolonged streaming, ~12-14s
    # - shaka: Won't start
    # ffmpeg -use_template 0
    # - dashjs v2: Won't start sometimes, or runs into an endless loop and can't recover
    # - dashjs v3: Stops downloading new segments and can't recover
    # - videojs-http-streaming: Stops downloading new segments and can't recover
    # - shaka: Won't start
    # To sum up, best combinations (in descending order) seem to be:
    # - ffmpeg -use_template 1 -use_timeline 1 + shaka
    # - ffmpeg -use_template 1 -use_timeline 1 + dashjs v2/v3
    # - nginx-rtmp dash + dashjs v2

    ### Output DASH segments using internal muxer
    #dash on;
    #dash_path /srv/segments/dash;
    #dash_nested on;
    #dash_fragment 2;
    #dash_playlist_length 60;
    #dash_cleanup on;
    ### This is to workaround nginx-rtmp bug #1771350 (on launchpad.net)
    #exec_publish chmod 755 /srv/segments/dash/$name;

    ### Output DASH segments using ffmpeg
    # Adjust utc_timing_url to point to your server! (see etc/nginx/nginx.conf for an example on how to setup this URL)
    exec_publish mkdir -p /srv/segments/dash/$name;
    exec ffmpeg -analyzeduration 11M -fflags nobuffer -i rtmp://localhost/$app/$name -c copy -f dash -use_template 1 -use_timeline 1 -window_size 30 -extra_window_size 1 -seg_duration 2.0 -remove_at_exit 1 -utc_timing_url "http://localhost:8080/time" /srv/segments/dash/$name/index.mpd;
    exec_publish_done rm -Rf /srv/segments/dash/$name;

    ### Output HLS segments (type MPEG-TS) using internal muxer
    # If you care about compatibility with Apples proprietary native implementation for HLS, also see
    #   https://developer.apple.com/documentation/http_live_streaming/hls_authoring_specification_for_apple_devices         
    #   Note: 2 sec keyframe interval (=GOP size) is required
    hls on;
    hls_nested on;
    hls_path /srv/segments/hls;
    # Will split at next keyframe after this time. Apple recommends 6s (used to be 10s)
    hls_fragment 6;
    # According to spec must have at least 6 segments
    hls_playlist_length 60;
    hls_cleanup on;
    ### This is to workaround nginx-rtmp bug #1771350 (on launchpad.net)
    exec_publish chmod 755 /srv/segments/hls/$name;

    ### Output HLS segments (type MPEG-TS) using ffmpeg
    #exec_publish mkdir -p /srv/segments/hls/$name;
    # We use 5s here because ffmpeg will cut at next keyframe after this time passed
    #exec ffmpeg -analyzeduration 11M -fflags nobuffer -i rtmp://localhost/$app/$name -c copy -f hls -hls_time 5 -hls_list_size 10 -hls_playlist_type event -hls_segment_type mpegts -hls_flags delete_segments+temp_file /srv/segments/hls/$name/index.m3u8;
    #exec_publish_done rm -Rf /srv/segments/hls/$name;

    ### TODO: Output HLS segments (type fMP4) using ffmpeg

    ### TODO: Poster generation by writing keyframes to jpg
}
