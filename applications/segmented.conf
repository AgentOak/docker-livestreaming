# This is for DASH+HLS output, all inputs should push/transcode to this
# Pushed in streams must have a fixed GOP size (usually 2s, but could also be 1s, 0.5s, ...),
#   otherwise segments may vary in length leading to choppy playback or playback not working at all.
#   You can verify constant segment size by looking at generated index.mpd and index.m3u8 files in /srv/segments:
#   index.m3u8 should have constant durations after #EXTINF
# Using a seperate RTMP server instead of transcoding+outputting dash in the same ffmpeg process
#   seems to drastcally reduce latency for some reason (less strict/ignores GOP boundaries?)
application segmented {
    live on;

    ### Only record original stream in live.conf
    record off;

    ### Internal-only restream
    allow publish 127.0.0.1;
    deny publish all;
    allow play 127.0.0.1;
    deny play all;

    ### Output DASH segments using internal muxer
    # nginx-rtmp's manifests are missing the UTCTiming tag and therefore fail DASH IF manifest validation!
    #dash on;
    #dash_path /srv/segments/dash;
    #dash_nested on;
    #dash_fragment 2;
    #dash_playlist_length 60;
    #dash_cleanup on;
    ### This is to workaround nginx-rtmp bug #1771350 (on launchpad.net)
    #exec_publish chmod 755 /srv/segments/dash/$name;

    ### Output DASH segments using ffmpeg
    # Adjust utc_timing_url to point to your server! (see etc/nginx/nginx.conf for an example on how to setup this URL)
    # seg_duration is minimum; will cut at next keyframe after it, so for NTSC framerates it will be 2.002s
    exec_publish mkdir -p /srv/segments/dash/$name;
    exec ffmpeg -y -analyzeduration 12M -fflags nobuffer -i rtmp://localhost/$app/$name -c copy -f dash -use_template 1 -use_timeline 1 -window_size 30 -extra_window_size 1 -seg_duration 2.0 -remove_at_exit 1 -utc_timing_url "http://localhost:8080/time" /srv/segments/dash/$name/index.mpd;
    exec_publish_done rm -Rf /srv/segments/dash/$name;

    ### Output HLS (MPEG-TS) segments using internal muxer
    # If you care about compatibility with Apples proprietary native implementation for HLS, also see
    #   https://developer.apple.com/documentation/http_live_streaming/hls_authoring_specification_for_apple_devices
    #   Note: 2 sec keyframe interval (=GOP size) is required
    hls on;
    hls_nested on;
    hls_path /srv/segments/hls;
    # Will split at next keyframe after this time. Apple recommends 6s (used to be 10s)
    hls_fragment 6;
    # According to spec must have at least 6 segments
    hls_playlist_length 60;
    hls_cleanup on;
    ### This is to workaround nginx-rtmp bug #1771350 (on launchpad.net)
    exec chmod 755 /srv/segments/hls/$name;

    ### Output HLS (MPEG-TS) segments using ffmpeg
    #exec_publish mkdir -p /srv/segments/hls/$name;
    #exec ffmpeg -analyzeduration 12M -fflags nobuffer -i rtmp://localhost/$app/$name -c copy -f hls -hls_time 6 -hls_list_size 10 -hls_playlist_type event -hls_segment_type mpegts -hls_flags delete_segments+temp_file /srv/segments/hls/$name/index.m3u8;
    #exec_publish_done rm -Rf /srv/segments/hls/$name;

    ### Output HLS (fMP4) segments using ffmpeg
    # Supported in HLS v7+, preferred by newer clients, e.g. shaka-player
    #exec_publish mkdir -p /srv/segments/hls-fmp4/$name;
    #exec ffmpeg -y -analyzeduration 12M -fflags nobuffer -i rtmp://localhost/$app/$name -c copy -f hls -hls_time 6 -hls_list_size 10 -hls_playlist_type event -hls_segment_type fmp4 -hls_flags delete_segments+temp_file /srv/segments/hls-fmp4/$name/index.m3u8;
    #exec_publish_done rm -Rf /srv/segments/hls-fmp4/$name;

    # More muxers supported by ffmpeg, see docs: mov, segment, smoothstreaming, webm_dash_manifest, webm_chunk

    ### Optional: Poster generation by writing keyframes to jpg
    # You might want to do this in live.conf instead to not use transcoded video; but no 2s interval is guaranteed then
    exec_publish mkdir -p /srv/segments/image/$name;
    exec ffmpeg -y -analyzeduration 12M -fflags nobuffer -skip_frame nokey -r 0.5 -vsync cfr -i rtmp://localhost/$app/$name -vf "scale=w=427:h=240:force_original_aspect_ratio=decrease" -map_metadata -1 -q 4 -f image2 -update 1 /srv/segments/image/$name/thumbnail.jpg -vf "scale=w=1280:h=720:force_original_aspect_ratio=decrease" -map_metadata -1 -q 4 -f image2 -update 1 /srv/segments/image/$name/poster.jpg;
    exec_publish_done rm -Rf /srv/segments/image/$name;
}
